tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.name <- lapply(anno.EC$EC, get.EC)
EC.name
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
get.EC("3.6.4.12")
get.EC("5.6.2.4")
get.EC("5.6.2.4")
parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
get.EC("3.6.4.12")
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
print(ec.num.new)
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
get.EC("3.6.4.12")
stringr::str_split("5.6.2.3 and 5.6.2.4", " and ")
stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
get.EC("3.6.4.12")
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
print(ec.num.new)
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
get.EC("3.6.4.12")
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.name <- lapply(anno.EC$EC, get.EC)
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.name <- lapply(anno.EC$EC, get.EC) |> unlist()
anno.EC[["name"]] <- EC.name
anno.EC
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
warnings()
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
#EC.name <- lapply(anno.EC$EC, get.EC) |> unlist()
#anno.EC[["name"]] <- EC.name
anno.EC
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
df
df$EC
library(tidyverse)
df$EC %>% unique()
df$EC
df
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.num <-  anno.EC$EC | unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
EC.name.df
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.num <-  anno.EC$EC |> unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
EC.name.df
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
df
df %>% sample(10)
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup() |>
head(30)
EC.num <-  anno.EC$EC |> unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
EC.name.df
#TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
#TERM2NAME.df <- go.info[, c("GO", "name")]
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
df
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup() |>
head(30)
EC.num <-  anno.EC$EC |> unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
drop <- EC.name.df |>
dplyr::filter(name == "Not found from GotEnzymes") |>
dplyr::pull(EC)
TERM2GENE.df <- anno.EC |> dplyr::filter(!EC %in% drop)
TERM2NAME.df <- EC.name.df |> dplyr::filter(!EC %in% drop)
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup() |>
head(30)
EC.num <-  anno.EC$EC |> unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
drop <- EC.name.df |>
dplyr::filter(name == "Not found from GotEnzymes") |>
dplyr::pull(EC)
TERM2GENE.df <- anno.EC |> dplyr::filter(!EC %in% drop)
TERM2NAME.df <- EC.name.df |> dplyr::filter(!EC %in% drop)
return(
list(
TERM2GENE = TERM2GENE.df,
TERM2NAME = TERM2NAME.df
)
)
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# Li F, Chen Y, Anton M, Nielsen J.
# GotEnzymes: an extensive database of enzyme parameter predictions.
# NAR (2022): gkac831
# API document:https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
df$TERM2GENE
df$TERM2NAME
parse.eggNOG.EC <- function(eggNOG.file){
eggno <- load.eggNOG(eggNOG.file)
anno.EC <- eggno |>
dplyr::filter(EC != "-") |>
dplyr::group_by(Gene) |>
dplyr::summarise(EC=stringr::str_split(EC, ",")) |>
tidyr::unnest(EC)  |>
dplyr::ungroup()
EC.num <-  anno.EC$EC |> unique()
EC.name <- lapply(EC.num, get.EC) |> unlist()
EC.name.df <- dplyr::tibble(
EC = EC.num,
name = EC.name
)
drop <- EC.name.df |>
dplyr::filter(name == "Not found from GotEnzymes") |>
dplyr::pull(EC)
TERM2GENE.df <- anno.EC |> dplyr::filter(!EC %in% drop)
TERM2NAME.df <- EC.name.df |> dplyr::filter(!EC %in% drop)
return(
list(
TERM2GENE = TERM2GENE.df,
TERM2NAME = TERM2NAME.df
)
)
}
get.EC <- function(ec.number) {
# databse: https://metabolicatlas.org/gotenzymes
# API: https://metabolicatlas.org/api/v2/#/GotEnzymes/gotEnzymesECInfo
#
url <- stringr::str_glue("https://metabolicatlas.org/api/v2/gotenzymes/ecs/{ec.number}")
ec.json <- RCurl::getURL(url)
print(url)
if (ec.json == 'Not Found') {
return("Not found from GotEnzymes")
}
ec.info <- jsonlite::fromJSON(ec.json)$info$name
if (!stringr::str_detect(ec.info, 'Transferred to', )) {
return(ec.info)
}else{
ec.num.new <-stringr::str_replace_all(ec.info,"Transferred to ", "")
if (stringr::str_detect(ec.num.new,  "and")) {
ec.num.new <- stringr::str_split("5.6.2.3 and 5.6.2.4", " and ") |> unlist()
ec.num.new <- ec.num.new[1]
}
warning(stringr::str_glue("{ec.number} --> {ec.info}"))
return(get.EC(ec.num.new))
}
}
df <- parse.eggNOG.EC("../parse_eggNOG/test_data/out.emapper.annotations")
get.EC('1.3.1.9')
library(devtools)
use_r("parse_GO.R")
load_all()
